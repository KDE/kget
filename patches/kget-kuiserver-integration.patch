Index: conf/kget.kcfg
===================================================================
--- conf/kget.kcfg	(revisión: 718632)
+++ conf/kget.kcfg	(copia de trabajo)
@@ -57,6 +57,15 @@
     <entry name="QuitAfterCompletedTransfer" type="Bool">
         <default>false</default>
     </entry>
+    <entry name="EnableKUIServerIntegration" type="Bool">
+        <default>false</default>
+    </entry>
+    <entry name="ExportSingleTransfer" type="Bool">
+        <default>true</default>
+    </entry>
+    <entry name="ExportGlobalJob" type="Bool">
+        <default>false</default>
+    </entry>
   </group>
 
   <group name="Network">
Index: conf/dlgadvanced.ui
===================================================================
--- conf/dlgadvanced.ui	(revisión: 718632)
+++ conf/dlgadvanced.ui	(copia de trabajo)
@@ -6,7 +6,7 @@
     <x>0</x>
     <y>0</y>
     <width>405</width>
-    <height>350</height>
+    <height>425</height>
    </rect>
   </property>
   <layout class="QVBoxLayout" >
@@ -55,6 +55,41 @@
     </widget>
    </item>
    <item>
+    <widget class="QGroupBox" name="kcfg_EnableKUIServerIntegration" >
+     <property name="minimumSize" >
+      <size>
+       <width>0</width>
+       <height>41</height>
+      </size>
+     </property>
+     <property name="title" >
+      <string>Enable KDE global progress tracking</string>
+     </property>
+     <property name="checkable" >
+      <bool>true</bool>
+     </property>
+     <property name="checked" >
+      <bool>false</bool>
+     </property>
+     <layout class="QVBoxLayout" >
+      <item>
+       <widget class="QRadioButton" name="kcfg_ExportSingleTransfer" >
+        <property name="text" >
+         <string>Show every single download </string>
+        </property>
+       </widget>
+      </item>
+      <item>
+       <widget class="QRadioButton" name="kcfg_ExportGlobalJob" >
+        <property name="text" >
+         <string>Show overall progress</string>
+        </property>
+       </widget>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item>
     <spacer>
      <property name="orientation" >
       <enum>Qt::Vertical</enum>
Index: core/kget.h
===================================================================
--- core/kget.h	(revisión: 718632)
+++ core/kget.h	(copia de trabajo)
@@ -21,6 +21,7 @@
 #include <kactioncollection.h>
 #include <ktabwidget.h>
 
+#include "kuiserverjobs.h"
 #include "scheduler.h"
 #include "kget_export.h"
 #include "observer.h"
@@ -221,6 +222,14 @@
          */
         static void setPluginsSettingsWidget(KTabWidget * widget);
 
+        /**
+         * Returns the kget kuiserver jobs manager
+         *
+         */
+         static void registerKJob(KJob *);
+         static void unregisterKJob(KJob *);
+         static void reloadKJobs();
+
     private:
         KGet();
         ~KGet();
@@ -305,6 +314,9 @@
 
         //Scheduler object
         static Scheduler * m_scheduler;
+
+        //pointer to the kget uiserver jobs manager
+        static KUiServerJobs *m_jobManager;
 };
 
 
Index: core/kuiserverjobs.h
===================================================================
--- core/kuiserverjobs.h	(revisión: 0)
+++ core/kuiserverjobs.h	(revisión: 0)
@@ -0,0 +1,48 @@
+/*
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU Library General Public License version 2 as
+ *   published by the Free Software Foundation
+ *
+ *   Copyright (C) 2007 by Javier Goday <jgoday@gmail.com>
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details
+ *
+ *   You should have received a copy of the GNU Library General Public
+ *   License along with this program; if not, write to the
+ *   Free Software Foundation, Inc.,
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#ifndef KUISERVERJOBS_H
+#define KUISERVERJOBS_H
+
+#include "kgetglobaljob.h"
+
+#include <kio/job.h>
+#include <kio/filejob.h>
+
+#include <QObject>
+#include <QList>
+
+class KUiServerJobs : public QObject
+{
+    Q_OBJECT
+public:
+    KUiServerJobs(QObject *parent=0);
+    ~KUiServerJobs();
+
+    void registerJob(KJob *job);
+    void unregisterJob(KJob *job);
+    void reload();
+
+private:
+    KGetGlobalJob *globalJob();
+
+    QList <KJob *> m_jobs;
+    KGetGlobalJob *m_globalJob;
+};
+
+#endif
Index: core/kgetglobaljob.cpp
===================================================================
--- core/kgetglobaljob.cpp	(revisión: 0)
+++ core/kgetglobaljob.cpp	(revisión: 0)
@@ -0,0 +1,87 @@
+/*
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU Library General Public License version 2 as
+ *   published by the Free Software Foundation
+ *
+ *   Copyright (C) 2007 by Javier Goday <jgoday@gmail.com>
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details
+ *
+ *   You should have received a copy of the GNU Library General Public
+ *   License along with this program; if not, write to the
+ *   Free Software Foundation, Inc.,
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#include "kgetglobaljob.h"
+
+#include <QTimer>
+
+KGetGlobalJob::KGetGlobalJob(QObject *parent)
+    : KJob(parent), m_jobs()
+{
+    m_timer = new QTimer(this);
+    m_timer->setSingleShot(false);
+
+    connect(m_timer, SIGNAL(timeout()), this, SLOT(update()));
+}
+
+KGetGlobalJob::~KGetGlobalJob()
+{
+    delete m_timer;
+}
+
+void KGetGlobalJob::registerJob(KJob *job)
+{
+    if(m_jobs.size() <= 0) {
+        m_timer->start(DEFAULT_UPDATE_TIME);
+    }
+    m_jobs.append(job);
+}
+
+void KGetGlobalJob::unregisterJob(KJob *job)
+{
+    m_jobs.removeAll(job);
+
+    if(m_jobs.size() <= 0) {
+        m_timer->stop();
+    }
+}
+
+qulonglong KGetGlobalJob::processedAmount(Unit unit) const
+{
+    qulonglong amount = 0;
+    foreach(KJob *child, m_jobs) {
+        amount += child->processedAmount(unit);
+    }
+
+    return amount;
+}
+
+qulonglong KGetGlobalJob::totalAmount(Unit unit) const
+{
+    qulonglong amount = 0;
+    foreach(KJob *child, m_jobs) {
+        amount += child->totalAmount(unit);
+    }
+
+    return amount;
+}
+
+unsigned long KGetGlobalJob::percent() const
+{
+    return 100 * processedAmount(KJob::Bytes) / totalAmount(KJob::Bytes);
+}
+
+void KGetGlobalJob::update()
+{
+    emit description(this, "KGet global information", 
+                    qMakePair(QString("source"), QString("KGet is downloading %1 files").arg(m_jobs.size())),
+                    qMakePair(QString("destination"), QString("to different locations")));
+
+    setProcessedAmount(KJob::Bytes, processedAmount(KJob::Bytes));
+    setTotalAmount(KJob::Bytes, totalAmount(KJob::Bytes));
+    setPercent(percent());
+}
Index: core/kget.cpp
===================================================================
--- core/kget.cpp	(revisión: 718632)
+++ core/kget.cpp	(copia de trabajo)
@@ -19,6 +19,7 @@
 #include "core/plugin/plugin.h"
 #include "core/plugin/transferfactory.h"
 #include "core/observer.h"
+#include "core/kuiserverjobs.h"
 #include "settings.h"
 
 #include <kio/netaccess.h>
@@ -479,6 +480,21 @@
     }
 }
 
+void KGet::registerKJob(KJob *job)
+{
+    m_jobManager->registerJob(job);
+}
+
+void KGet::unregisterKJob(KJob *job)
+{
+    m_jobManager->unregisterJob(job);
+}
+
+void KGet::reloadKJobs()
+{
+    m_jobManager->reload();
+}
+
 // ------ STATIC MEMBERS INITIALIZATION ------
 QList<ModelObserver *> KGet::m_observers;
 TransferTreeModel * KGet::m_transferTreeModel;
@@ -487,6 +503,7 @@
 QList<KLibrary *> KGet::m_pluginKLibraries;
 Scheduler * KGet::m_scheduler = new Scheduler();
 MainWindow * KGet::m_mainWindow = 0;
+KUiServerJobs * KGet::m_jobManager = new KUiServerJobs();
 
 // ------ PRIVATE FUNCTIONS ------
 KGet::KGet()
Index: core/kuiserverjobs.cpp
===================================================================
--- core/kuiserverjobs.cpp	(revisión: 0)
+++ core/kuiserverjobs.cpp	(revisión: 0)
@@ -0,0 +1,95 @@
+/*
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU Library General Public License version 2 as
+ *   published by the Free Software Foundation
+ *
+ *   Copyright (C) 2007 by Javier Goday <jgoday@gmail.com>
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details
+ *
+ *   You should have received a copy of the GNU Library General Public
+ *   License along with this program; if not, write to the
+ *   Free Software Foundation, Inc.,
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#include "kuiserverjobs.h"
+
+#include "kgetglobaljob.h"
+#include "settings.h"
+
+#include <kuiserverjobtracker.h>
+
+KUiServerJobs::KUiServerJobs(QObject *parent)
+    : QObject(parent), m_jobs()
+{
+}
+
+KUiServerJobs::~KUiServerJobs()
+{
+}
+
+void KUiServerJobs::registerJob(KJob *job)
+{
+    m_jobs.append(job);
+
+    if(Settings::enableKUIServerIntegration()) {
+        if(Settings::exportGlobalJob()) {
+            globalJob()->registerJob(job);
+        }
+        else {
+            KIO::getJobTracker()->registerJob(job);
+        }
+    }
+}
+
+void KUiServerJobs::unregisterJob(KJob *job)
+{
+    m_jobs.removeAll(job);
+
+    if(Settings::enableKUIServerIntegration()) {
+        if(Settings::exportGlobalJob()) {
+            globalJob()->unregisterJob(job);
+        }
+        else {
+            KIO::getJobTracker()->unregisterJob(job);
+        }
+    }
+}
+
+// every time the configuration changed, check the registered jobs and the state throught the ui server
+void KUiServerJobs::reload()
+{
+    if(m_globalJob && !Settings::exportGlobalJob()) {
+        KIO::getJobTracker()->unregisterJob(globalJob());
+        delete m_globalJob;
+    }
+
+    if(Settings::exportGlobalJob()) {
+        KIO::getJobTracker()->registerJob(globalJob());
+    }
+    else {
+        foreach(KJob *job, m_jobs) {
+            if(Settings::enableKUIServerIntegration()) {
+                KIO::getJobTracker()->registerJob(job);
+            }
+            else {
+                KIO::getJobTracker()->unregisterJob(job);
+            }
+        }
+    }
+}
+
+// get the kget global job
+KGetGlobalJob *KUiServerJobs::globalJob()
+{
+    if(!m_globalJob) {
+        m_globalJob = new KGetGlobalJob();
+        KIO::getJobTracker()->registerJob(m_globalJob);
+    }
+
+    return m_globalJob;
+}
Index: core/kgetglobaljob.h
===================================================================
--- core/kgetglobaljob.h	(revisión: 0)
+++ core/kgetglobaljob.h	(revisión: 0)
@@ -0,0 +1,56 @@
+/*
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU Library General Public License version 2 as
+ *   published by the Free Software Foundation
+ *
+ *   Copyright (C) 2007 by Javier Goday <jgoday@gmail.com>
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details
+ *
+ *   You should have received a copy of the GNU Library General Public
+ *   License along with this program; if not, write to the
+ *   Free Software Foundation, Inc.,
+ *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#ifndef KGETGLOBALJOB_H
+#define KGETGLOBALJOB_H
+
+#include <kio/job.h>
+#include <kio/filejob.h>
+
+#include <QList>
+
+#define DEFAULT_UPDATE_TIME 5000
+
+class QTimer;
+
+class KGetGlobalJob : public KJob
+{
+    Q_OBJECT
+public:
+    KGetGlobalJob(QObject *parent=0);
+    ~KGetGlobalJob();
+
+    void registerJob(KJob *);
+    void unregisterJob(KJob *);
+
+    void start() {};
+
+    // reimplement this functions from KJob to query all the child jobs
+    qulonglong processedAmount(Unit unit) const;
+    qulonglong totalAmount(Unit unit) const;
+    unsigned long percent() const;
+
+private slots:
+    void update();
+
+private:
+    QList <KJob *> m_jobs;
+
+    QTimer *m_timer;
+};
+
+#endif
Index: mainwindow.cpp
===================================================================
--- mainwindow.cpp	(revisión: 718632)
+++ mainwindow.cpp	(copia de trabajo)
@@ -513,6 +513,8 @@
     slotKonquerorIntegration(Settings::konquerorIntegration());
     m_konquerorIntegration->setChecked(Settings::konquerorIntegration());
 
+    KGet::reloadKJobs();
+
     if (Settings::autoPaste())
         clipboardTimer->start(1000);
     else
Index: transfer-plugins/multisegmentkio/multisegkio.cpp
===================================================================
--- transfer-plugins/multisegmentkio/multisegkio.cpp	(revisión: 718632)
+++ transfer-plugins/multisegmentkio/multisegkio.cpp	(copia de trabajo)
@@ -11,6 +11,8 @@
 #include "multisegkio.h"
 #include "multisegkiosettings.h"
 
+#include "core/kget.h"
+
 #include <kde_file.h>
 
 #include <QFile>
@@ -58,6 +60,8 @@
     m_putJob = 0;
     connect(&d->speed_timer, SIGNAL(timeout()), SLOT(calcSpeed()));
     QTimer::singleShot(0, this, SLOT(slotStart()));
+
+    KGet::registerKJob(this);
 }
 
 MultiSegmentCopyJob::MultiSegmentCopyJob(
@@ -94,11 +98,14 @@
     setProcessedAmount(Bytes, ProcessedSize);
     setTotalAmount(Bytes, totalSize);
     QTimer::singleShot(0, this, SLOT(slotStart()));
+
+    KGet::registerKJob(this);
 }
 
 MultiSegmentCopyJob::~MultiSegmentCopyJob()
 {
     kDebug(5001) << "MultiSegmentCopyJob::destructor()";
+
     SegFactory->deleteLater();
     delete d;
 }
@@ -111,6 +118,8 @@
 void MultiSegmentCopyJob::stop()
 {
     kDebug(5001) << "MultiSegmentCopyJob::stop()";
+    KGet::unregisterKJob(this);
+
     setError(KIO::ERR_USER_CANCELED);
     if (SegFactory)
         SegFactory->stopTransfer();
@@ -180,6 +189,8 @@
 
 void MultiSegmentCopyJob::slotClose( KIO::Job * )
 {
+    KGet::unregisterKJob(this);
+
     kDebug(5001) << "MultiSegmentCopyJob::slotClose() putjob";
     if( processedAmount(Bytes) == totalAmount(Bytes) )
     {
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revisión: 718632)
+++ CMakeLists.txt	(copia de trabajo)
@@ -34,6 +34,8 @@
    core/plugin/plugin.cpp
    core/plugin/transferfactory.cpp
    core/transfercontainer.cpp
+   core/kuiserverjobs.cpp
+   core/kgetglobaljob.cpp
 )
 
 kde4_add_kcfg_files(kgetcore_SRCS conf/settings.kcfgc)
