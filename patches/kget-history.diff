Index: kget/core/transfergroup.cpp
===================================================================
--- kget/core/transfergroup.cpp	(revision 735134)
+++ kget/core/transfergroup.cpp	(working copy)
@@ -14,9 +14,14 @@
 #include "core/transfergrouphandler.h"
 #include "core/kget.h"
 
-#include <kdebug.h>
+#include <KDebug>
+#include <KMessageBox>
+#include <KLocale>
+#include <KStandardDirs>
 
 #include <QDomElement>
+#include <QFile>
+#include <QDateTime>
 
 
 TransferGroup::TransferGroup(TransferTreeModel * model, Scheduler * scheduler, const QString & name)
@@ -71,6 +76,49 @@
 
 void TransferGroup::remove(Transfer * transfer)
 {
+
+    QString filename = KStandardDirs::locateLocal("appdata", "transferhistory.kgt");
+    QFile file(filename);
+    QDomDocument *doc;
+    QDomElement root;
+
+    if (!file.exists())
+    {
+        doc = new QDomDocument("Transfers");
+        root = doc->createElement("Transfers");
+        doc->appendChild(root);
+    }
+    else
+    {
+        doc = new QDomDocument();
+        doc->setContent(&file);
+        file.close();
+        root = doc->documentElement();
+        doc->appendChild(root);
+    }
+
+    QDomElement e = doc->createElement("Transfer");
+    root.appendChild(e);
+
+    e.setAttribute("Source", transfer->source().url());
+    e.setAttribute("Dest", transfer->dest().url());
+    e.setAttribute("Time", QDateTime::currentDateTime().toString());
+    
+    kDebug(5001) << transfer->statusText();
+
+    if (transfer->statusText() == "Finished")
+        e.setAttribute("State", "Finished");
+    else
+        e.setAttribute("State", "Aborted");
+
+    if (!file.open(QIODevice::ReadWrite))
+        KMessageBox::error(0, i18n("History-File cannot be opened correctly!"), i18n("Error"), 0);
+
+    QTextStream stream( &file );
+    doc->save( stream, 0 );
+    file.close();
+    kDebug(5001) << "remove Transfer:" << transfer->source().url();
+
     JobQueue::remove(transfer);
 
     handler()->postRemovedTransferEvent(transfer);
Index: kget/mainwindow.cpp
===================================================================
--- kget/mainwindow.cpp	(revision 735134)
+++ kget/mainwindow.cpp	(working copy)
@@ -24,6 +24,7 @@
 #include "ui/tray.h"
 #include "ui/droptarget.h"
 #include "ui/newtransferdialog.h"
+#include "ui/transferhistory.h"
 
 #include <kapplication.h>
 #include <kstandarddirs.h>
@@ -221,6 +222,12 @@
     actionCollection()->addAction("show_drop_target", showDropTargetAction);
     showDropTargetAction->setChecked(Settings::showDropTarget());
     connect(showDropTargetAction, SIGNAL(triggered()), SLOT(slotToggleDropTarget()));
+
+    QAction *transferHistoryAction = actionCollection()->addAction("Transfer History");
+    transferHistoryAction->setText(i18n("&Transfer History"));
+    transferHistoryAction->setIcon(KIcon("history"));
+    transferHistoryAction->setShortcuts(KShortcut("Ctrl+H"));
+    connect(transferHistoryAction, SIGNAL(triggered()), SLOT(slotTransferHistory()));
 }
 
 void MainWindow::slotDelayedInit()
@@ -581,6 +588,12 @@
         menuBar()->hide();
 }
 
+void MainWindow::slotTransferHistory()
+{
+    TransferHistory *history = new TransferHistory();
+    history->show();
+}
+
 /** widget events */
 
 void MainWindow::closeEvent( QCloseEvent * e )
Index: kget/mainwindow.h
===================================================================
--- kget/mainwindow.h	(revision 735134)
+++ kget/mainwindow.h	(working copy)
@@ -93,6 +93,7 @@
     void slotNewToolbarConfig();
     void slotNewConfig();
     void slotCheckClipboard();
+    void slotTransferHistory();
 
 private:
     // one-time functions
Index: kget/ui/transferhistory.ui
===================================================================
--- kget/ui/transferhistory.ui	(revision 0)
+++ kget/ui/transferhistory.ui	(revision 0)
@@ -0,0 +1,146 @@
+<ui version="4.0" >
+ <class>TransferHistory</class>
+ <widget class="QWidget" name="TransferHistory" >
+  <property name="geometry" >
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>960</width>
+    <height>403</height>
+   </rect>
+  </property>
+  <property name="windowTitle" >
+   <string>TransferHistory</string>
+  </property>
+  <layout class="QGridLayout" >
+   <item row="1" column="0" >
+    <widget class="QTreeWidget" name="treeWidget" >
+     <property name="windowModality" >
+      <enum>Qt::NonModal</enum>
+     </property>
+     <property name="sizePolicy" >
+      <sizepolicy vsizetype="Expanding" hsizetype="Expanding" >
+       <horstretch>0</horstretch>
+       <verstretch>0</verstretch>
+      </sizepolicy>
+     </property>
+     <property name="verticalScrollBarPolicy" >
+      <enum>Qt::ScrollBarAsNeeded</enum>
+     </property>
+     <property name="horizontalScrollBarPolicy" >
+      <enum>Qt::ScrollBarAsNeeded</enum>
+     </property>
+     <property name="dragEnabled" >
+      <bool>true</bool>
+     </property>
+     <property name="dragDropMode" >
+      <enum>QAbstractItemView::DragOnly</enum>
+     </property>
+     <property name="alternatingRowColors" >
+      <bool>true</bool>
+     </property>
+     <property name="sortingEnabled" >
+      <bool>true</bool>
+     </property>
+     <property name="animated" >
+      <bool>true</bool>
+     </property>
+     <column>
+      <property name="text" >
+       <string>Source</string>
+      </property>
+     </column>
+     <column>
+      <property name="text" >
+       <string>Destination</string>
+      </property>
+     </column>
+     <column>
+      <property name="text" >
+       <string>Time</string>
+      </property>
+     </column>
+     <column>
+      <property name="text" >
+       <string>State</string>
+      </property>
+     </column>
+    </widget>
+   </item>
+   <item row="0" column="0" >
+    <layout class="QHBoxLayout" >
+     <property name="topMargin" >
+      <number>0</number>
+     </property>
+     <property name="rightMargin" >
+      <number>0</number>
+     </property>
+     <item>
+      <widget class="QPushButton" name="clearButton" >
+       <property name="sizePolicy" >
+        <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+         <horstretch>0</horstretch>
+         <verstretch>0</verstretch>
+        </sizepolicy>
+       </property>
+       <property name="text" >
+        <string>Clear History</string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="QLabel" name="searchLabel" >
+       <property name="sizePolicy" >
+        <sizepolicy vsizetype="Fixed" hsizetype="Fixed" >
+         <horstretch>0</horstretch>
+         <verstretch>0</verstretch>
+        </sizepolicy>
+       </property>
+       <property name="minimumSize" >
+        <size>
+         <width>100</width>
+         <height>18</height>
+        </size>
+       </property>
+       <property name="text" >
+        <string>&lt;html>&lt;head>&lt;meta name="qrichtext" content="1" />&lt;style type="text/css">
+p, li { white-space: pre-wrap; }
+&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
+&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">&lt;span style=" font-weight:600;">Search:&lt;/span>&lt;/p>&lt;/body>&lt;/html></string>
+       </property>
+      </widget>
+     </item>
+     <item>
+      <widget class="KTreeWidgetSearchLine" name="searchBar" >
+       <property name="sizePolicy" >
+        <sizepolicy vsizetype="Maximum" hsizetype="Expanding" >
+         <horstretch>0</horstretch>
+         <verstretch>0</verstretch>
+        </sizepolicy>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+  <action name="actionDelete_Selected" >
+   <property name="text" >
+    <string>Delete Selected</string>
+   </property>
+  </action>
+  <action name="actionDownload" >
+   <property name="text" >
+    <string>Download</string>
+   </property>
+  </action>
+ </widget>
+ <customwidgets>
+  <customwidget>
+   <class>KTreeWidgetSearchLine</class>
+   <extends>QLineEdit</extends>
+   <header location="global" >KTreeWidgetSearchLine</header>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections/>
+</ui>
Index: kget/ui/transferhistory.cpp
===================================================================
--- kget/ui/transferhistory.cpp	(revision 0)
+++ kget/ui/transferhistory.cpp	(revision 0)
@@ -0,0 +1,246 @@
+/* This file is part of the KDE project
+
+   Copyright (C) 2007 by Lukas Appelhans <l.appelhans@gmx.de>
+
+   This program is free software; you can redistribute it and/or
+   modify it under the terms of the GNU General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+*/
+
+#include "transferhistory.h"
+#include "ui/newtransferdialog.h"
+
+#include <QFile>
+#include <QDomElement>
+#include <QDomNodeList>
+#include <QMenu>
+#include <QFileSystemWatcher>
+
+#include <KDebug>
+#include <KStandardDirs>
+#include <KMessageBox>
+#include <KToolBar>
+#include <KTreeWidgetSearchLine>
+#include <KRun>
+
+TransferHistory::TransferHistory(QWidget *parent)
+    : KDialog(parent)
+{
+    //Setup Ui-Parts from Designer
+    QWidget *mainWidget = new QWidget(this);
+
+    Ui::TransferHistory widget;
+    widget.setupUi(mainWidget);
+
+    m_gridLayout = widget.gridLayout;
+    m_treeWidget = widget.treeWidget;
+    m_treeWidget->setRootIsDecorated(false);
+    m_treeWidget->setColumnWidth(0, 310);
+    m_treeWidget->setColumnWidth(1, 214);
+    m_treeWidget->setColumnWidth(2, 180);
+    m_treeWidget->setColumnWidth(3, 64);
+    m_hboxLayout = widget.hboxLayout;
+    m_searchLabel = widget.searchLabel;
+    m_searchBar = widget.searchBar;
+    m_searchBar->setTreeWidget(m_treeWidget);
+    m_clearButton = widget.clearButton;
+    m_clearButton->setIcon(KIcon("edit-clear-history"));
+    m_actionDelete_Selected = widget.actionDelete_Selected;
+    m_actionDelete_Selected->setIcon(KIcon("edit-delete"));
+    m_actionDownload = widget.actionDownload;
+    m_actionDownload->setIcon(KIcon("document-new"));
+    m_openFile = new QAction(KIcon("document-open"), "&Open File", this);
+    setMainWidget(mainWidget);
+    setInitialSize(QSize(800, 400));
+
+    slotAddTransfers();
+
+    watcher = new QFileSystemWatcher();
+    watcher->addPath(KStandardDirs::locateLocal("appdata", QString()));
+    kDebug(5001) << watcher->directories();
+
+    /**connect(actionReloadHistory, SIGNAL(triggered()), this, SLOT(slotAddTransfers()));**/
+    connect(m_actionDelete_Selected, SIGNAL(triggered()), this, SLOT(slotDeleteTransfer()));
+    connect(m_actionDownload, SIGNAL(triggered()), this, SLOT(slotDownload()));
+    connect(m_openFile, SIGNAL(triggered()), this, SLOT(slotOpenFile()));
+    connect(m_clearButton, SIGNAL(clicked()), this, SLOT(slotClear()));
+    connect(watcher, SIGNAL(directoryChanged()), this, SLOT(addTransfers()));
+    connect(this, SIGNAL(accepted()), this, SLOT(slotSave()));
+    connect(this, SIGNAL(rejected()), this, SLOT(slotWriteDefault()));
+}
+
+void TransferHistory::slotDeleteTransfer()
+{
+    int index = m_treeWidget->indexOfTopLevelItem(m_treeWidget->currentItem());
+    delete m_treeWidget->takeTopLevelItem(index);
+}
+
+void TransferHistory::slotAddTransfers()
+{
+    QString filename = KStandardDirs::locateLocal("appdata", "transferhistory.kgt");
+    bool errorbool;
+    QString error;
+    int line;
+    int column;
+
+    QDomDocument doc("tempHistory");
+    QFile file(filename);
+    if (!file.open(QIODevice::ReadOnly))
+        return;
+    if (!doc.setContent(&file, &errorbool, &error, &line, &column)) 
+    {
+        kDebug(5001) << "Error1" << error << line << column;
+        file.close();
+        return;
+    }
+    if(file.reset())
+        kDebug(5001) << "resettingn the file, to have a clean starting point to readd";
+    file.close();
+
+    QDomElement root = doc.documentElement();
+
+    kDebug(5001) << "Load file" << filename;
+
+    QDomNodeList list = root.elementsByTagName("Transfer");
+
+    int nItems = list.length();
+
+    for (int i = 0 ; i < nItems ; i++)
+    {
+        QDomElement dom = list.item(i).toElement();
+        defaultItems.append(dom);
+        QStringList attributeList;
+        attributeList.append(dom.attribute("Source"));
+        attributeList.append(dom.attribute("Dest"));
+        attributeList.append(dom.attribute("Time"));
+        attributeList.append(dom.attribute("State"));
+        QTreeWidgetItem *item = new QTreeWidgetItem(attributeList);
+        m_treeWidget->addTopLevelItem(item);
+        kDebug(5001) << attributeList;
+
+        foreach (QDomElement element, defaultItems)
+        {
+            kDebug(5001) << element.attribute("Source");
+        }
+    }
+    doc.clear();
+    file.remove();
+}
+
+void TransferHistory::slotClear()
+{
+     m_treeWidget->clear();
+}
+
+void TransferHistory::slotWriteDefault()
+{
+    if (!save)
+    {
+        QString filename = KStandardDirs::locateLocal("appdata", "transferhistory.kgt");
+        QFile file(filename);
+        file.remove();
+        QDomDocument *doc;
+        QDomElement root;
+
+        if (!file.exists())
+        {
+            doc = new QDomDocument("Transfers");
+            root = doc->createElement("Transfers");
+            doc->appendChild(root);
+        }
+        else
+        {
+            doc = new QDomDocument();
+            doc->setContent(&file);
+            file.close();
+            root = doc->documentElement();
+            doc->appendChild(root);
+        }
+
+        foreach (QDomElement e, defaultItems)
+        {
+            kDebug(5001) << e.attribute("Source");
+            root.appendChild(e);
+        }
+
+        if (!file.open(QIODevice::ReadWrite))
+            KMessageBox::error(0, i18n("History-File cannot be opened correctly!"), i18n("Error"), 0);
+
+        QTextStream stream(&file);
+        doc->save(stream, 0);
+        file.close();
+    }
+}
+
+void TransferHistory::slotSave()
+{
+    QString filename = KStandardDirs::locateLocal("appdata", "transferhistory.kgt");
+    QFile file(filename);
+    file.remove();
+    QDomDocument *doc;
+    QDomElement root;
+
+    if (!file.exists())
+    {
+        doc = new QDomDocument("Transfers");
+        root = doc->createElement("Transfers");
+        doc->appendChild(root);
+    }
+    else
+    {
+        doc = new QDomDocument();
+        doc->setContent(&file);
+        file.close();
+        root = doc->documentElement();
+        doc->appendChild(root);
+    }
+
+    foreach (QTreeWidgetItem *item, m_treeWidget->findItems("", Qt::MatchContains | Qt::MatchRecursive))
+    {
+        QDomElement e = doc->createElement("Transfer");
+        root.appendChild(e);
+
+        e.setAttribute("Source", item->text(0));
+        e.setAttribute("Dest", item->text(1));
+        e.setAttribute("Time", item->text(2));
+        e.setAttribute("State", item->text(3));
+
+        kDebug(5001) << e.attribute("Source");
+    }
+
+    if (!file.open(QIODevice::ReadWrite))
+        KMessageBox::error(0, i18n("History-File cannot be opened correctly!"), i18n("Error"), 0);
+
+    QTextStream stream(&file);
+    doc->save(stream, 0);
+    file.close();
+    save = true;
+
+    close();
+}
+
+void TransferHistory::slotDownload()
+{
+    if (m_treeWidget->indexOfTopLevelItem(m_treeWidget->currentItem()) == -1)
+        return;
+    NewTransferDialog::showNewTransferDialog(m_treeWidget->currentItem()->text(0));
+    slotSave();
+}
+
+void TransferHistory::contextMenuEvent(QContextMenuEvent *event)
+{
+    if (m_treeWidget->indexOfTopLevelItem(m_treeWidget->currentItem()) == -1)
+        return;
+    QMenu *contextMenu = new QMenu(this);
+    contextMenu->addAction(m_actionDownload);
+    contextMenu->addAction(m_actionDelete_Selected);
+    if (m_treeWidget->currentItem()->text(3) == "Finished")
+        contextMenu->addAction(m_openFile);
+    contextMenu->exec(QCursor::pos());
+}
+
+void TransferHistory::slotOpenFile()
+{
+    new KRun(m_treeWidget->currentItem()->text(1), this, true, false);
+}
\ No newline at end of file
Index: kget/ui/kgetui.rc
===================================================================
--- kget/ui/kgetui.rc	(revision 735134)
+++ kget/ui/kgetui.rc	(working copy)
@@ -7,6 +7,8 @@
         <Action name="import_transfers"/>
         <Action name="export_transfers"/>
         <Separator/>
+        <Action name="Transfer History" />
+        <Separator/>
         <Action name="quit"/>
     </Menu>
         <Menu noMerge="1" name="Downloads"><text>&amp;Downloads</text>
Index: kget/ui/transferhistory.h
===================================================================
--- kget/ui/transferhistory.h	(revision 0)
+++ kget/ui/transferhistory.h	(revision 0)
@@ -0,0 +1,58 @@
+/* This file is part of the KDE project
+
+   Copyright (C) 2007 by Lukas Appelhans <l.appelhans@gmx.de>
+
+   This program is free software; you can redistribute it and/or
+   modify it under the terms of the GNU General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+*/
+
+#ifndef TRANSFERHISTORY_H
+#define TRANSFERHISTORY_H
+
+#include <KDialog>
+#include <QList>
+#include <QDomElement>
+
+#include "ui_transferhistory.h"
+
+class QFileSystemWatcher;
+
+class TransferHistory : public KDialog, Ui::TransferHistory
+{
+    Q_OBJECT
+
+    public:
+        TransferHistory(QWidget *parent = 0);
+
+    private:
+        QList<QDomElement> defaultItems;
+        bool save;
+        QFileSystemWatcher *watcher;
+
+        QGridLayout *m_gridLayout;
+        QTreeWidget *m_treeWidget;
+        QHBoxLayout *m_hboxLayout;
+        QLabel *m_searchLabel;
+        KTreeWidgetSearchLine *m_searchBar;
+        QAction *m_actionDelete_Selected;
+        QAction *m_actionClear;
+        QAction *m_actionDownload;
+        QAction *m_openFile;
+        QPushButton *m_clearButton;
+
+    private slots:
+        void slotDeleteTransfer();
+        void slotAddTransfers();
+        void slotClear();
+        void slotWriteDefault();
+        void slotSave();
+        void slotDownload();
+        void slotOpenFile();
+        void contextMenuEvent(QContextMenuEvent *event);
+
+};
+
+#endif
+ 
Index: kget/CMakeLists.txt
===================================================================
--- kget/CMakeLists.txt	(revision 735134)
+++ kget/CMakeLists.txt	(working copy)
@@ -68,6 +68,7 @@
    ui/viewscontainer.cpp
    ui/newtransferdialog.cpp
    ui/kextendableitemdelegate.cpp
+   ui/transferhistory.cpp
    mainwindow.cpp
    main.cpp
 )
@@ -79,6 +80,7 @@
    conf/dlgnetwork.ui
    ui/transferdetailsfrm.ui
    ui/newtransferwidget.ui
+   ui/transferhistory.ui
 )
 
 kde4_add_executable(kget ${kget_SRCS})
